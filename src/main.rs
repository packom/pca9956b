//! Main binary entry point for openapi_client implementation.

use httpd_util::{get_server_addr, https, init_app, ssl};
use log::{debug};

#[path = "server.rs"] mod server;
#[path = "http.rs"] mod http;

use http::get_env;


/// Create custom server, wire it to the autogenerated router,
/// and pass it to the web server.
fn main() {
    init_app(
        "pca9956b",
        "Piers Finlayson, piers@piersandkatie.com",
        "An HTTP(S) microservice exposing PCA9956B functionality",
        vec![
            "[I2CBUS_IP] - IP address or domain name of I2C bus microservice to connect to",
            "[I2CBUS_PORT] - Port of I2C bus microservice",
        ],
        get_env(),
    );

    let ssl = match https() {
        true => Some(ssl().unwrap()),
        _ => None,
    };
    match ssl {
        Some(_) => debug!("Using SSL"),
        None => debug!("Not using SSL"),
    }

    let addr_socket = get_server_addr();
    let addr_string = format!("{}:{}", addr_socket.ip(), addr_socket.port());
    debug!("Bind to: {}", addr_string);
    hyper::rt::run(server::create(&addr_string, ssl));
}
