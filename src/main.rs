//! Main binary entry point for openapi_client implementation.

#![allow(missing_docs)]
extern crate pca9956b;
extern crate hyper;
extern crate native_tls;
extern crate pca9956b_api;
extern crate swagger;
extern crate tokio_proto;
extern crate tokio_tls;
extern crate chrono;
extern crate futures;
extern crate httpd_util;
#[macro_use]
extern crate log;

use hyper::server::Http;
use swagger::auth::AllowAllAuthenticator;
use swagger::EmptyContext;
use tokio_proto::TcpServer;
use httpd_util::{get_server_addr, https, init_app, ssl};

/// Create custom server, wire it to the autogenerated router,
/// and pass it to the web server.
fn main() {
    init_app(
        "pca9956b",
        "Piers Finlayson, piers@piersandkatie.com",
        "An HTTP(S) microservice exposing PCA9956B functionality",
        vec![
            "[I2CBUS_IP] - IP address or domain name of I2C bus microservice to connect to",
            "[I2CBUS_PORT] - Port of I2C bus microservice",
        ],
        pca9956b::get_env(),
    );

    let service_fn = pca9956b_api::server::context::NewAddContext::<_, EmptyContext>::new(
        AllowAllAuthenticator::new(pca9956b::NewService::new(), "cosmo"),
    );

    let addr = get_server_addr();
    // Start the server
    if https() {
        info!("Running server at https://{}", addr);
        let ssl = ssl().expect("Failed to load SSL keys");
        let builder: native_tls::TlsAcceptorBuilder =
            native_tls::backend::openssl::TlsAcceptorBuilderExt::from_openssl(ssl);
        let tls_acceptor = builder.build().expect("Failed to build TLS acceptor");
        TcpServer::new(
            tokio_tls::proto::Server::new(Http::new(), tls_acceptor),
            addr,
        )
        .serve(service_fn);
    } else {
        // Using HTTP
        info!("Running server at http://{}", addr);
        TcpServer::new(Http::new(), addr).serve(service_fn);
    }
}
